#include <DHT.h>
#include <ESP8266WiFi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h>

// Configuración de pines y tipo de sensor
#define DHTPIN 2       // Pin donde está conectado el sensor DHT
#define DHTTYPE DHT22  // Cambiar a DHT11 si usas DHT11
DHT dht(DHTPIN, DHTTYPE);

#define HUMIDITY_PIN A0
#define NPK_PIN A1

#define SCREEN_WIDTH 128    // OLED display width, in pixels
#define SCREEN_HEIGHT 64    // OLED display height, in pixels
#define OLED_RESET -1       // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define RE 8
#define DE 7

const byte nitro[] = {0x01, 0x03, 0x00, 0x1e, 0x00, 0x01, 0xe4, 0x0c};
const byte phos[] = {0x01, 0x03, 0x00, 0x1f, 0x00, 0x01, 0xb5, 0xcc};
const byte pota[] = {0x01, 0x03, 0x00, 0x20, 0x00, 0x01, 0x85, 0xc0};
byte values[11];
SoftwareSerial mod(2, 3);

const char* ssid = "TU_SSID";
const char* password = "TU_PASSWORD";
const char* server = "TU_SERVIDOR"; // Ejemplo: "192.168.1.100"

void setup() {
    Serial.begin(9600);
    dht.begin();
    mod.begin(9600);
    pinMode(RE, OUTPUT);
    pinMode(DE, OUTPUT);

    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    delay(500);
    display.clearDisplay();
    display.setCursor(25, 15);
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.println("NPK Sensor");
    display.setCursor(25, 35);
    display.print("Initializing");
    display.display();
    delay(3000);

    // Conectar a WiFi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Conectando a WiFi...");
    }
    Serial.println("Conectado a WiFi");

    Serial.println("Monitoreo de NPK, humedad y temperatura iniciado.");
}

void loop() {
    // Leer datos de sensores
    float h = dht.readHumidity();
    float t = dht.readTemperature();
    int humidityValue = analogRead(HUMIDITY_PIN);
    byte valN = nitrogen();
    delay(250);
    byte valP = phosphorous();
    delay(250);
    byte valK = potassium();
    delay(250);

    // Imprimir valores leídos
    Serial.print("Humedad del suelo: ");
    Serial.println(humidityValue);
    Serial.print("Humedad ambiente: ");
    Serial.print(h);
    Serial.print(" %\t");
    Serial.print("Temperatura: ");
    Serial.print(t);
    Serial.print(" *C\t");
    Serial.print("NPK - N: ");
    Serial.print(valN);
    Serial.print(" mg/kg, P: ");
    Serial.print(valP);
    Serial.print(" mg/kg, K: ");
    Serial.println(valK);

    // Enviar datos al servidor
    if (WiFi.status() == WL_CONNECTED) {
        WiFiClient client;
        if (client.connect(server, 80)) {
            String url = "/update?";
            url += "humidity_soil=" + String(humidityValue);
            url += "&humidity=" + String(h);
            url += "&temperature=" + String(t);
            url += "&npk_n=" + String(valN);
            url += "&npk_p=" + String(valP);
            url += "&npk_k=" + String(valK);

            client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                         "Host: " + server + "\r\n" +
                         "Connection: close\r\n\r\n");
            client.stop();
        }
    }

    // Determinar estado del suelo según humedad
    if (humidityValue >= 0 && humidityValue <= 300) {
        Serial.println("Sensor en suelo seco");
    } else if (humidityValue > 301 && humidityValue <= 700) {
        Serial.println("Sensor en suelo húmedo");
    } else if (humidityValue >= 701) {
        Serial.println("Sensor en agua");
    }

    // Mostrar valores en la pantalla OLED
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0, 5);
    display.print("N: ");
    display.print(valN);
    display.setTextSize(1);
    display.print(" mg/kg");

    display.setTextSize(2);
    display.setCursor(0, 25);
    display.print("P: ");
    display.print(valP);
    display.setTextSize(1);
    display.print(" mg/kg");

    display.setTextSize(2);
    display.setCursor(0, 45);
    display.print("K: ");
    display.print(valK);
    display.setTextSize(1);
    display.print(" mg/kg");

    display.display();

    delay(10000); // Esperar 10 segundos antes de la próxima lectura
}

byte nitrogen() {
    digitalWrite(DE, HIGH);
    digitalWrite(RE, HIGH);
    delay(10);
    if (mod.write(nitro, sizeof(nitro)) == 8) {
        digitalWrite(DE, LOW);
        digitalWrite(RE, LOW);
        for (byte i = 0; i < 7; i++) {
            values[i] = mod.read();
        }
    }
    return values[4];
}

byte phosphorous() {
    digitalWrite(DE, HIGH);
    digitalWrite(RE, HIGH);
    delay(10);
    if (mod.write(phos, sizeof(phos)) == 8) {
        digitalWrite(DE, LOW);
        digitalWrite(RE, LOW);
        for (byte i = 0; i < 7; i++) {
            values[i] = mod.read();
        }
    }
    return values[4];
}

byte potassium() {
    digitalWrite(DE, HIGH);
    digitalWrite(RE, HIGH);
    delay(10);
    if (mod.write(pota, sizeof(pota)) == 8) {
        digitalWrite(DE, LOW);
        digitalWrite(RE, LOW);
        for (byte i = 0; i < 7; i++) {
            values[i] = mod.read();
        }
    }
    return values[4];
}

